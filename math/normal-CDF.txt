// The following code was ported from GSL (GNU Scientific Library).
// The original copyright notice and license is from the original
// C code that this is ported from.  It probably only applies to the
// C code; however, we reproduce the notice here anyway, if only for
// attribution sake.

/* cdf/gauss.c
 *
 * Copyright (C) 2002, 2004 Jason H. Stover.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

/*
 * Computes the cumulative distribution function for the Gaussian
 * distribution using a rational function approximation.  The
 * computation is for the standard Normal distribution, i.e., mean 0
 * and standard deviation 1. If you want to compute Pr(X < t) for a
 * Gaussian random variable X with non-zero mean m and standard
 * deviation sd not equal to 1, find gsl_cdf_ugaussian ((t-m)/sd).
 * This approximation is accurate to at least double precision. The
 * accuracy was verified with a pari-gp script.  The largest error
 * found was about 1.4E-20. The coefficients were derived by Cody.
 *
 * References:
 *
 * W.J. Cody. "Rational Chebyshev Approximations for the Error
 * Function," Mathematics of Computation, v23 n107 1969, 631-637.
 *
 * W. Fraser, J.F Hart. "On the Computation of Rational Approximations
 * to Continuous Functions," Communications of the ACM, v5 1962.
 *
 * W.J. Kennedy Jr., J.E. Gentle. "Statistical Computing." Marcel Dekker. 1980.
 * 
 *  
 */

script_variables
   global double GSL_DBL_EPSILON = 2.2204460492503131e-16;
   global double M_E         = 2.71828182845904523536028747135;   /* e */
   global double M_SQRTPI    = 1.77245385090551602729816748334;
   global double M_SQRT2     = 1.41421356237309504880168872421;
   global double M_2_SQRTPI  = 1.12837916709551257389615890312;   /* 2/sqrt(pi) */
   global double M_SQRT1_2   = 0.70710678118654752440084436210;   /* sqrt(1/2) */
   global double M_1_SQRT2PI = M_2_SQRTPI * M_SQRT1_2 / 2.0;
   global double SQRT32      = 4.0 * M_SQRT2;

   /*
    * IEEE double precision dependent constants.
    *
    * GAUSS_EPSILON: Smallest positive value such that 
    *                gsl_cdf_gaussian(x) > 0.5.
    * GAUSS_XUPPER: Largest value x such that gsl_cdf_gaussian(x) < 1.0.
    * GAUSS_XLOWER: Smallest value x such that gsl_cdf_gaussian(x) > 0.0.
    */
   global double GAUSS_EPSILON = GSL_DBL_EPSILON / 2;
   global double GAUSS_XUPPER = 8.572;
   global double GAUSS_XLOWER = -37.519;

   global double GAUSS_SCALE = 16.0;
end_script_variables

script double exp(double x)
   return MATH.Pow(MATH.E(),x);
end_script

script double get_del (double x, double rational)
  double xsq = 0.0;
  double del = 0.0;
  double result = 0.0;

  xsq = MATH.Floor (x * GAUSS_SCALE) / GAUSS_SCALE;
  del = (x - xsq) * (x + xsq);
  del *= 0.5;

  result = exp (-0.5 * xsq * xsq) * exp (-1.0 * del) * rational;

  return result;
end_script

/*
 * Normal cdf for fabs(x) < 0.66291
 */
script double gauss_small (double x)
  double result = 0.0;
  double xsq;
  double xnum;
  double xden;
  Array<double> a = Array<double>();
  Array<double> b = Array<double>();

  a[0] = 2.2352520354606839287;
  a[1] = 161.02823106855587881;
  a[2] = 1067.6894854603709582;
  a[3] = 18154.981253343561249;
  a[4] = 0.065682337918207449113;

  b[0] = 47.20258190468824187;
  b[1] = 976.09855173777669322;
  b[2] = 10260.932208618978205;
  b[3] = 45507.789335026729956;

  xsq = x * x;
  xnum = a[4] * xsq;
  xden = xsq;

  for (int i = 0; i < 3; i+=1)
    {
      xnum = (xnum + a[i]) * xsq;
      xden = (xden + b[i]) * xsq;
    }

  result = x * (xnum + a[3]) / (xden + b[3]);

  return result;
end_script

/*
 * Normal cdf for 0.66291 < fabs(x) < sqrt(32).
 */
script double gauss_medium (double x)
  double temp = 0.0;
  double result = 0.0;
  double xnum;
  double xden;
  double absx;
  Array<double> c = Array<double>();
  Array<double> d = Array<double>();

  c[0] = 0.39894151208813466764;
  c[1] = 8.8831497943883759412;
  c[2] = 93.506656132177855979;
  c[3] = 597.27027639480026226;
  c[4] = 2494.5375852903726711;
  c[5] = 6848.1904505362823326;
  c[6] = 11602.651437647350124;
  c[7] = 9842.7148383839780218;
  c[8] = 1.0765576773720192317e-8;

  d[0] = 22.266688044328115691;
  d[1] = 235.38790178262499861;
  d[2] = 1519.377599407554805;
  d[3] = 6485.558298266760755;
  d[4] = 18615.571640885098091;
  d[5] = 34900.952721145977266;
  d[6] = 38912.003286093271411;
  d[7] = 19685.429676859990727;

  absx = MATH.Fabs (x);

  xnum = c[8] * absx;
  xden = absx;

  for (int i = 0; i < 7; i+=1)
    {
      xnum = (xnum + c[i]) * absx;
      xden = (xden + d[i]) * absx;
    }

  temp = (xnum + c[7]) / (xden + d[7]);

  result = get_del (x, temp);

  return result;
end_script

/*
 * Normal cdf for 
 * {sqrt(32) < x < GAUSS_XUPPER} union { GAUSS_XLOWER < x < -sqrt(32) }.
 */
script double gauss_large (double x)
  double result;
  double xsq;
  double temp;
  double xnum;
  double xden;
  double absx;
  Array<double> p = Array<double>();
  Array<double> q = Array<double>();

  p[0] = 0.21589853405795699;
  p[1] = 0.1274011611602473639;
  p[2] = 0.022235277870649807;
  p[3] = 0.001421619193227893466;
  p[4] = 2.9112874951168792e-5;
  p[5] = 0.02307344176494017303;

  q[0] = 1.28426009614491121;
  q[1] = 0.468238212480865118;
  q[2] = 0.0659881378689285515;
  q[3] = 0.00378239633202758244;
  q[4] = 7.29751555083966205e-5;

  absx = MATH.Fabs (x);
  xsq = 1.0 / (x * x);
  xnum = p[5] * xsq;
  xden = xsq;

  for (int i = 0; i < 4; i+=1)
    {
      xnum = (xnum + p[i]) * xsq;
      xden = (xden + q[i]) * xsq;
    }

  temp = xsq * (xnum + p[4]) / (xden + q[4]);
  temp = (M_1_SQRT2PI - temp) / absx;

  result = get_del (x, temp);

  return result;
end_script

script double gsl_cdf_ugaussian_P (double x)
  double result;
  double absx = MATH.Fabs (x);

  if (absx < GAUSS_EPSILON)
    {
      result = 0.5;
      return result;
    }
  else if (absx < 0.66291)
    {
      result = 0.5 + gauss_small (x);
      return result;
    }
  else if (absx < SQRT32)
    {
      result = gauss_medium (x);

      if (x > 0.0)
        {
          result = 1.0 - result;
        }

      return result;
    }
  else if (x > GAUSS_XUPPER)
    {
      result = 1.0;
      return result;
    }
  else if (x < GAUSS_XLOWER)
    {
      result = 0.0;
      return result;
    }
  else
    {
      result = gauss_large (x);

      if (x > 0.0)
        {
          result = 1.0 - result;
        }
    }

  return result;
end_script

script double pnorm (double x, double mu, double sigma)
  return gsl_cdf_ugaussian_P ((x-mu)/sigma);
end_script
